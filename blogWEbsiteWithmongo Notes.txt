blog website steps -

1.MAKE A FOLDER

2.make package.json  -
 'npm init -y' or 'npm init'

3. install all the dependencies you need
express mongoose ejs. -
 'npm i express mongoose ejs'

Express  is for a server.
mongoose is for database.
ejs is for different views.


4.then install dev tools.
npm i --save-dev nodemon

---"npm install [package-name] –save-dev: When –save-dev is used with npm install, it signifies that the package is a development dependency. A development dependency is any package that absence will not affect the work of the application."

also in pacakage.json in scripts add replace test script with-

"devStart":"nodemon server.js"

5 - now make server.js to write all code
then you can  run ur server by 
 'nodemon server.js'

6 - now create a server using express in server.js
by running following code---

const express = require('express')
const app = express()

app.get('/',(req,res)=>{
    res.send('Hello World')
})

app.listen(5000)

now you can see hello eorld is printing on screeen .
by typing - localhost:5000 in  chrome

7- now set ejs to your project-
in server.js include this code also.

app.set('view engine','ejs')

Thats because its gonna covert the ejs code to html.
Now create a new folder named 'views'.
where you can put all your ejs files. to make them work.

now make "index.ejs " inside views folder.

in index.js type" ! " fot html boiler plate

any thing you want .

also make some changes in server.js files where in app.get  method instead of res.send write res.render .

res.render("index")
 
now save it and check .

so above everything is our basic setup for an express app.

8- now next this is to create a route folder-
to make all our  routes inside it.

make article.js inside routes. for our show route and edit route everything is inside in this .
now inside article.js

require express and then  
us express.router() function and then store it in variable named router.

const express = require("express");
const router = express.Router();

The express. Router() function is used to create a new router object. This function is used when you want to create a new router object in your program to handle requests.
but the main thing about this router is that router is we need to tell our application to use it. so for that we need to export it . 

in article.js-
 
module.exports = router

now when ever we want the code of that use in another file use it.

next thing is to require that in server.js

const articleRouter = require('./routes/articles')

now set so we can use in our routes.

app.use('/articles',articleRouter)

so what is going to happen here  every single route we create in 'articleRouter' is going to added to the end of  '/articles'.

now in article.js
before export code
create all the routes inside it.

router.get('/',(req,res)=>{
    res.send('In articles')
})

Then run -
nodemon server.js

now before that we have to set our main route in server.js because all of our articles will be in our index page.
update get method to -this code
also created fake articles to work on

app.get('/',(req,res) => {
    const articles = [{  
       title:'Test Article',
       createdAt : Date.now(),
       description : 'Test description' 
    }]
    res.render("index",{articles: articles})
})

next this is to fetch articles in index.js.
also include boot strap link which u will get from bootstrap.com. also pasting it below

<!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
<body>
<div class="container">
      <h1 class="mb-4">Blog Articles</h1>
      <a href="/articles/new" class="btn btn-success">New Article</a>
      <% articles.forEach(article => { %>
      <div class="card mt-4">
        <div class="card-body">
          <h4 class="card-title"><%= article.title %></h4>

          <div class="card-subtitle text-muted mb-2">
            <%= article.createdAt.toLocaleDateString() %>
          </div>

          <div class="card-text mb-2"><%=article.description %></div>
        </div>
      </div>
      <% }) %>
    </div>
</body>
 
then check this at index page how it looks.

9: now creating routes for crud operation in articles

   To Create New article code-

make route for new article -
in articles.js --

const express = require("express");
const Article = require("./../models/article");
const router = express.Router();


router.get('/new',(req,res)=>{
    
    res.render('articles/new')
})

router.post('/',(req,res) =>{
    
})

module.exports = router;
     
and new.ejs to create a view of  form for new article.
also create a seprate file for form fields to put all fields like input etc because those will also be used in edit articles form in short they will be same so create partial.

new.ejs -

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!-- CSS only -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU"
      crossorigin="anonymous"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Blog</title>
  </head>
  <body>
    <div class="container">
      <h1 class="mb-4">
        <h1>New Article</h1>
        <form action="/articles" method="POST">
          <%- include('_form_fields') %> //to link form field
        </form>
      </h1>
    </div>
  </body>
</html>


_form_fields.ejs-

<div class="form-group">
  <label for="title">Title</label>
  <input
    required
    type="text"
    name="title"
    id="title"
    class="form-control mb-4"
  />
</div>
<div class="form-group">
  <label for="description">Description</label>
  <textarea
    name="description"
    id="description"
    class="form-control mb-4"
  ></textarea>
</div>
<div class="form-group">
  <label for="markdown">Markdown</label>
  <textarea name="markdown" id="markdown" class="form-control mb-4"></textarea>
</div>

<a href="/" class="btn btn-secondary">Cancel</a>

<button type="submit" class="btn btn-primary">Save</button>

10 : next thing is working on post route to post data through form--

Before that connect to d tabase to store data.
we are using MONGOOSE here-

database connection code-
in server.js-

//require mongoose
const mongoose = require("mongoose");

//database conection
mongoose.connect("mongodb://localhost/blog", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

Now create a model for that create a folder name models-

inside model folder-
  create a file name article.js-

const mongoose = require("mongoose");

//creating schema
const articleSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },

  markdown: {
    type: String,
    required: true,
  },
  createdAt: {
    type: Date,
    default: Date.now(),
  },
});

//exporting it
module.exports = mongoose.model('Article',articleSchema)



then import it to articles.js--

const Article = require('./../models/article') //importing from article.js 

after that in server.js put the below code  to fetch data from form.

and kindly put this before 
this code ' app.use("/articles", articleRouter);' or you can put this at bottom before app.listen so it will never give error.

app.use(express.urlencoded({extended : false});

Now the final code for post route will be -




now to prepolutate the value of for when something goes wrong is --
update _form_field_.ejs- 

<div class="form-group mb-2">
  <label for="title">Title</label>
  <input
    required
    value="<%= article.title  %> "
    type="text"
    name="title"
    id="title"
    class="form-control"
  />
</div>

<div class="form-group mb-2">
  <label for="description">Description</label>
  <textarea name="description" id="description" class="form-control">
<%= article.description  %></textarea
  >
</div>

<div class="form-group mb-2">
  <label for="markdown">Markdown</label>
  <textarea name="markdown" id="markdown" class="form-control">
<%= article.markdown  %></textarea
  >
</div>

<a href="/" class="btn btn-secondary">Cancel</a>

<button type="submit" class="btn btn-primary">Save</button>

To access article data but for that you need to get article object in get request of form data -update it -

in articles.js-

router.get("/new", (req, res) => {
  res.render("articles/new", { article: new Article() });
});

And the final code of creating new article is-\
in articles.js-

const express = require("express");
const Article = require("./../models/article");
const router = express.Router();

router.get("/new", (req, res) => {
  res.render("articles/new", { article: new Article() });
});

router.get("/:id", (req, res) => {});

router.post("/", async (req, res) => {
   let article = new Article({
    title: req.body.title,
    description: req.body.description,
    markdown: req.body.markdown,
  });
  try {
    article = await article.save();
    res.redirect(`/articles/${article.id}`);
  } catch (e) {
    res.render("articles/new", { article: article });
  }
});

module.exports = router;

--> so CRUD ' s C (CREATE) is completed now next is  R (READ)--

For that we have to make route for get by id  and then have to create the page where single article is shown.

in artiicles.js - 

router.get("/:id", async (req, res) => {
  const article = await Article.findById(req.params.id);
  if (article == null) res.redirect("/");
  res.render("articles/show", { article: article });
});

then create a view  tht in views folder articles folder - show.ejs

in show.ejs-

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- CSS only -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU"
      crossorigin="anonymous"
    />
    <title>Blog</title>
  </head>
  <body>
    <div class="container">
      <h1 class="mb-4"><%= article.title %></h1>
      <div class="text-muted mb-2">
        <%= article.createdAt.toLocaleDateString() %>
      </div>
      <a href="/" class="btn btn-secondary">All Articles</a>
      <a href="/articles/edit/<%= article.id %> " class="btn btn-info">Edit</a>
      <div><%= article.markdown %></div>
    </div>
  </body>
</html>

then update all articles page in server.js-
remove fake data with original data and sort it from recent data added on top-

in server.js-

const Article = require("./models/article");

app.get("/", async (req, res) => {
  const articles = await Article.find().sort({ createdAt: "desc" }); //find() is mongoose method will show all the articles

  res.render("articles/index", { articles: articles });
});

also put read more button to index.ejs page to view each  Article-

 <a class="btn btn-primary" href="articles/<%= article.id %> ">Read More</a>


Next thing we are gonna do is change the id visible in url to title - and we have to work on markdown part of blog-

so first we have to install some library -
in bash-
npm i marked slugify
 
marked library - it allows us to create markdown and turned it into HTML.

slugify library- allows us to convert something like our title into a url friendly 
slug which we can use instead of our title.

so in models folder in article.js-

const marked = require('marked');
const slugify = require('slugify')

first we will work on slugify part;

in models in article.js-

in articleschema add one more named slug-

const articleSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
  },
  markdown: {
    type: String,
    required: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  slug: {
    type: String,
    required: true,
    unique: true,
  },
});

//this function is made to work slugify
// Pre middleware functions of mongoose are executed one after another, when each middleware calls next.

articleSchema.pre("validate", function (next) {
  if (this.title) {
    this.slug = slugify(this.title, { lower: true, strict: true });
  }

  next();
});

then update the routes of where we used id -
in articles.js-

//to find single article by id
router.get("/:slug", async (req, res) => {
  //findById is mongoose method to find data by id
  const article = await Article.find({ slug: req.params.slug });
  if (article == null) res.redirect("/");
  res.render("articles/show", { article: article });
});


//to post data of new article
router.post("/", async (req, res) => {
  let article = new Article({
    title: req.body.title,
    description: req.body.description,
    markdown: req.body.markdown,
  });
  try {
    article = await article.save();
    res.redirect(`/articles/${article.slug}`);
  } catch (e) {
    console.log(e);
    res.render("articles/new", { article: article });
  }
});


in index.ejs-
instead of using id use slug.

<a class="btn btn-primary" href="articles/<%= article.slug %> ">Read More</a>

you will notice that the article you added previous will not work because that were added without slug so we will create route for delete to delete the old articles-
For that inside articles.js create new route for delete--

//to delete article
router.delete(":id", async (req, res) => {
  await Article.findByIdAndDelete(req.params.id);
  res.redirect("/");
});

But as we know that html form only two methods GET and POST so it is coplicated to work with DELETE method so we will use a library called method- override
this will override the method hat our form passes

in bash install it -
npm i method-override

In seriver.js -

const methodOverride = require('method-override')

app.use(methodOverride('_method'))

in index.js- for delete bttton

 <form
            action="/articles/<%= article.id %>?_method=DELETE"
            method="POST"
            class="d-inline"
          >
            <button type="submit" class="btn btn-danger">Delete</button>
          </form>

So The Final thing left is markdown part --

for that will will need a few more library for that-

npm i dompurify jsdom


now in models folder in article.js-

// DOMPurify is a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG.
// you can feed DOMPurify with string full of dirty HTML and it will return a string (unless configured otherwise) with clean HTML.
const createDomPurify = require("dompurify");

const { JSDOM } = require("jsdom");

const dompurify = createDomPurify(new JSDOM().window);

adding sanitizedHtml  to article schema-


const articleSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
  },
  markdown: {
    type: String,
    required: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  slug: {
    type: String,
    required: true,
    unique: true,
  },
  sanitizedHtml: {
    type: String,
    required: true,
  },
});

also writing 2 lines of code in articleSchema function -

// Pre middleware functions of mongoose are executed one after another, when each middleware calls next.
articleSchema.pre("validate", function (next) {
  if (this.title) {
    this.slug = slugify(this.title, { lower: true, strict: true });
  }
  if (this.markdown) {
    this.sanitizedHtml = dompurify.sanitize(marked(this.markdown));
  }

  next();
});

and then final thing is in show.js-
replace -
<div><%= article.markdown %></div>
to
<div><%- article.sanitizedHtml %></div>

then save everyting and test by adding new article and in markdown area type-
# Test

dshhsdh


so it will result as 

Test

hjhjk


Note - Delete the article u added before because of changes they won't show up


Last thing We have to do the EDIT of crud  or u can say Update -
In articles.js creating a route for edit-

//to get edit article data
router.get("/edit/:id", async(req, res) => {
  const article = await Article.findById(req.params.id)
  res.render("articles/edit", { article: article });

now make edit.ejs --

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- CSS only -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU"
      crossorigin="anonymous"
    />
    <title>Blog</title>
  </head>
  <body>
    <div class="container">
      <h1 class="mb-4">Edit Article</h1>

      <form action="/articles/<%= article.id %>?_method=PUT" method="POST">
        <%- include('_form_fields') %>
      </form>
    </div>
  </body>
</html>

});

it is same as new.ejs we just changed the action.

now we have to make a PUT route in articles.js--

so as we see that the code inside put and post route is almost same so we will make a function of code which is common in both -- 

In articles.js-

//to post data of new article
router.post(
  "/",
  async (req, res, next) => {
    req.article = new Article();
    next();
  },
  saveArticleAndredirect("new")
);

// to update data of article
router.put(
  "/:id",
  async (req, res, next) => {
    req.article = await Article.findById(req.params.id)
    next();
  },
  saveArticleAndredirect("edit")
);

//that funcction is this and this will save data and then redirect it to the required route.
function saveArticleAndredirect(path) {
  return async (req, res) => {
    let article = req.article;

    article.title = req.body.title;
    article.description = req.body.description;
    article.markdown = req.body.markdown;

    try {
      article = await article.save();
      res.redirect(`/articles/${article.slug}`);
    } catch (e) {
      res.render(`articles/${path}`, { article: article });
    }
  };
}

